#Specifies the Docker Compose file format version (3.8 is a stable version)
version: '3.8'

services:
  zookeeper:
  #Specifies the docker image to use
    image: confluentinc/cp-zookeeper:7.5.0
  #Sets a custom name for the container, without this Docker would generate a random name  
    container_name: zookeeper
  #The enviornment variables section - these configure how Zookeeper runs
    environment:
  #The port Zookeeper listens on for client connections. 2181 is the standard Zookeeper port.
      ZOOKEEPER_CLIENT_PORT: 2181
  #The basic time unit in milliseconds used by Zookeeper for heartbeats and session timeouts.
      ZOOKEEPER_TICK_TIME: 2000
    ports:
  #This exposes Zookeeper's port 2181 to the host machine's port 2181, so it can be accessed at localhost:2181.
      - "2181:2181"
    networks:
  #Connects this service to a custom network so it can communicate with other services.
      - news-aggregator-network

  kafka:
  #Uses Confluent's Kafka image,
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
  #depends_on tells Docker to start Zookeeper before Kafka, since Kafka needs Zookeeper to be running.
    depends_on:
      - zookeeper
    ports:
  #For connections from the host machine (localhost)
      - "9092:9092"
  #For connections from other Docker containers
      - "9093:9093"
    environment:
  #A unique identifier for this Kafka broker.
      KAFKA_BROKER_ID: 1
  #Tells Kafka where to find Zookeeper.
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #Tells the client how to connect to Kafka
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #The replication factor for the internal __consumer_offsets topic. 
  #The replication factor determines how many copies of the data Kafka keeps.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #Configuration for Kafka's transaction log.
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #Allows Kafka to automatically create topics when a producer tries to write to a non-existent topic. 
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - news-aggregator-network

  mongodb:
    image: mongo:7.0
    container_name: mongodb
  #if MongoDB crashes or the Docker daemon restarts, this container will automatically restart.
    restart: always
  #Exposes MongoDB's default port 27017 to the host machine.
    ports:
      - "27017:27017"
    environment:
  #Creates a root user with these credentials when the database is first initialized.
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
  #Mounts two volumes to persist data.
    volumes:
  #Stores the actual database data.
      - mongodb_data:/data/db
  #Stores MongoDB configuration files.
      - mongodb_config:/data/configdb
    networks:
      - news-aggregator-network
  
  #A web-based MongoDB admin interface. Version 1.0.2 is the latest stable release.
  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    restart: always
  #Depends on MongoDB being started first.
    depends_on:
      - mongodb
  #Exposes the web UI on port 8081.
    ports:
      - "8081:8081"
  #Credentials to connect to MongoDB
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
  #Disables basic authentication for the Mongo Express web UI.
      ME_CONFIG_BASICAUTH: false
    networks:
      - news-aggregator-network

  faust-worker:
    build:
      context: .
      dockerfile: Dockerfile.faust
    container_name: faust-worker
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    networks:
      - news-aggregator-network
    restart: unless-stopped

#Defines named volumes that Docker manages. 
#The local driver stores data on the host machine's filesystem. 
#Docker handles the actual storage location.
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

#Creates a custom bridge network. 
#All services on this network can communicate with each other using their service names as hostnames. 
networks:
  news-aggregator-network:
    driver: bridge